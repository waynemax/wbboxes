variables:
  COMPANY_NAME: limcore
  APPNAME_SHORT: ${CI_PROJECT_NAME}
  APP_PORT: 3035
  REGISTRY_PATH: limcore
  REGISTRY_PROJECT: ${CI_PROJECT_NAME}
  VERSION_FILE: "ci_version.txt"
  IS_SET_GIT_TAG: "false"
  TAG_VERSION: 0.0.1
  HTTP_CODE_VERSION: 404
  PIPELINE_ID_VERSION: 0.0.0.0
  IMAGE_STRING_NUMBER: 11
  ###  for docker-didn 19 - https://gitlab.com/gitlab-org/gitlab-runner/issues/4501
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  ### nomad
  NOMAD_APP_REPO_PATH: $NOMAD_REPO_NAME/${CI_PROJECT_NAME}
  NOMAD_STAND_VARS: ../vars/c7-dev-vars.yml
  NOMAD_STAND_VARS_ALFA: ../vars/c7-alfa-vars.yml
  NOMAD_STAND_VARS_PROD: ../vars/c7-prod-vars.yml
  NOMAD_APP_VARS: ${CI_PROJECT_NAME}-c7-dev.yml
  NOMAD_APP_VARS_ALFA: ${CI_PROJECT_NAME}-c7-alfa.yml
  NOMAD_APP_VARS_PROD: ${CI_PROJECT_NAME}-c7-prod.yml
  NOMAD_TASK_FILE: ci-${CI_PROJECT_NAME}.nomad

stages:
  - unit_test
  - test
  - build_version
  - docker_build_artefacts
  - deploy
  - ready_prod
  - notify

include:
  - project: "${CI_PROJECT_ROOT_NAMESPACE}/shared-infra/c7-shared-tasks"
    ref: "master"
    file: "notify/up-version-v2.yml"
  - project: "${CI_PROJECT_ROOT_NAMESPACE}/shared-infra/c7-shared-tasks"
    ref: "master"
    file: "templates/ci-templates.yml"
  - project: "${CI_PROJECT_ROOT_NAMESPACE}/shared-infra/c7-shared-tasks"
    ref: "master"
    file: "templates/ci-migrations.yml"
  - project: "${CI_PROJECT_ROOT_NAMESPACE}/shared-infra/c7-shared-tasks"
    ref: "master"
    file: "deploy/deploy-nomad-c7-v1.yml"
  - project: "${CI_PROJECT_ROOT_NAMESPACE}/shared-infra/c7-shared-tasks"
    ref: "master"
    file: "deploy/deploy-nomad-c7-prod-v1.yml"
  - project: "${CI_PROJECT_ROOT_NAMESPACE}/shared-infra/c7-shared-tasks"
    ref: "master"
    file: "notify/send-failed-v2.yml"
  - template: Security/SAST.gitlab-ci.yml

.build_docker: &build_docker
  stage: docker_build_artefacts
  tags:
    - docker20_cache
  before_script:
    - docker login -u $REGISTRY_PUSH_LOGIN -p $REGISTRY_PASS
    - ls -la
    - echo "${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}" > version.txt
  script:
    - >
      docker build
      -f dockerfile.ci
      --build-arg NODEJS_BASE_IMAGE=$NODEJS_BASE_IMAGE
      --build-arg DOCKER_PROXY_SRV=$DOCKER_PROXY_SRV
      --build-arg NPM_PROXY=$NPM_PROXY
      --build-arg CI_VERSION=${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}
      --build-arg CI_COMMIT_TIMESTAMP=$CI_COMMIT_TIMESTAMP
      --build-arg REACT_APP_API_WALLET_URL=${REACT_APP_API_WALLET_URL}
      --tag $REGISTRY_PATH/$REGISTRY_PROJECT:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
      --tag $REGISTRY_PATH/$REGISTRY_PROJECT:${CI_ENVIRONMENT_NAME}-latest
      . --no-cache
  after_script:
    - docker push $REGISTRY_PATH/$REGISTRY_PROJECT:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA
    - docker push $REGISTRY_PATH/$REGISTRY_PROJECT:${CI_ENVIRONMENT_NAME}-latest

docker:dev:
  <<: *build_docker
  environment:  dev
  except:
    - tags

docker:alfa:
  <<: *build_docker
  environment:  alfa
  only:
    - master

docker_release:
  stage: docker_build_artefacts
  environment:
    name: release
  tags:
    - docker20_nocache
  before_script:
    - apk add git curl
    - docker login -u $REGISTRY_PUSH_LOGIN -p $REGISTRY_PASS
  script:
    - ls -la
    - PIPELINE_ID_VER=$(curl --user "$REPO_VER_LOGIN:$REPO_VER_PASS" https://$REPO_SRV/repository/$ARTIFACTS_VER_PATH/$APPNAME_SHORT/pipelin-id/$CI_PIPELINE_ID/$VERSION_FILE)
    - echo $PIPELINE_ID_VER
    - echo "${PIPELINE_ID_VER}-${CI_COMMIT_SHORT_SHA}" > version.txt
    - >
      docker build
      -f dockerfile.ci
      --build-arg NODEJS_BASE_IMAGE=$NODEJS_BASE_IMAGE
      --build-arg DOCKER_PROXY_SRV=$DOCKER_PROXY_SRV
      --build-arg NPM_PROXY=$NPM_PROXY
      --build-arg CI_VERSION=$PIPELINE_ID_VER
      --build-arg CI_COMMIT_TIMESTAMP=$CI_COMMIT_TIMESTAMP
      --build-arg REACT_APP_STAGE_C4_API=${REACT_APP_STAGE_C4_API}
      --build-arg REACT_APP_C4_AUTH=${REACT_APP_C4_AUTH}
      --build-arg REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID}
      --tag $REGISTRY_PATH/$REGISTRY_PROJECT:$PIPELINE_ID_VER
      --tag $REGISTRY_PATH/$REGISTRY_PROJECT:release-latest
      . --no-cache
    - docker push $REGISTRY_PATH/$REGISTRY_PROJECT:$PIPELINE_ID_VER
    - docker push $REGISTRY_PATH/$REGISTRY_PROJECT:release-latest
  only:
    - tags
